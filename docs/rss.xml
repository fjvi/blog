<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>小饅頭の部落格</title><link>https://blog.grapehut.us.kg</link><description>Stay hungry. Stay foolish. --Steve Jobs</description><copyright>小饅頭の部落格</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://blog.grapehut.us.kg</link></image><lastBuildDate>Sat, 18 Jan 2025 05:47:31 +0000</lastBuildDate><managingEditor>小饅頭の部落格</managingEditor><ttl>60</ttl><webMaster>小饅頭の部落格</webMaster><item><title>Vol.34 虚拟货币空投</title><link>https://blog.grapehut.us.kg/post/34.html</link><description># Grass&#13;
https://app.getgrass.io/&#13;
Wallet　SOL(Solana)：BWMDv46owqpA3XRXpbT8pkap9fZotcFx6E7QSx2dVANJ&#13;
https://solscan.io/account/BWMDv46owqpA3XRXpbT8pkap9fZotcFx6E7QSx2dVANJ&#13;
Step1空头结束，Step2进行中&#13;
&#13;
# Teneo&#13;
https://teneo.pro/&#13;
Wallet　ETH：0x7d6693e04c04471fbc7fe2f38245d83419f641f5&#13;
https://solscan.io/account/BWMDv46owqpA3XRXpbT8pkap9fZotcFx6E7QSx2dVANJ&#13;
Step1进行中&#13;
&#13;
# Wipter&#13;
https://wipter.com/en/register?via=E7248B8406&#13;
暂未绑定钱包&#13;
&#13;
# NodePay&#13;
https://app.nodepay.ai/register?ref=ngE8T22GWhdwHlw&#13;
Wallet　SOL(Solana)：BWMDv46owqpA3XRXpbT8pkap9fZotcFx6E7QSx2dVANJ&#13;
https://solscan.io/account/BWMDv46owqpA3XRXpbT8pkap9fZotcFx6E7QSx2dVANJ&#13;
Season1,Season2空头结束,  Season3进行中&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/34.html</guid><pubDate>Wed, 15 Jan 2025 13:58:27 +0000</pubDate></item><item><title>Vol.33 PowerToys使用技巧</title><link>https://blog.grapehut.us.kg/post/33.html</link><description># 下载PowerToys&#13;
https://github.com/microsoft/PowerToys&#13;
&#13;
# 下载插件&#13;
1. [ChatGPTPowerToys](https://github.com/ferraridavide/ChatGPTPowerToys)&#13;
将下载的插件解压后，放置到这个目录下：`C:\Program Files\PowerToys\RunPlugins`&#13;
重启PowerToys。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/33.html</guid><pubDate>Tue, 14 Jan 2025 03:54:48 +0000</pubDate></item><item><title>Vol.32 免费获取OpenAI API</title><link>https://blog.grapehut.us.kg/post/32.html</link><description># OpenAI API&#13;
### 1. https://github.com/chatanywhere/GPT_API_free&#13;
支持 gpt-3.5-turbo系列 / gpt-4系列 / gpt-4o系列 / gpt-4o-audio-preview / embeddings / DALL·E / whisper 等，国内动态加速 直连无需代理&#13;
```&#13;
支持Models, &#13;
　Embedding, &#13;
　text-davinci(免费版不支持), &#13;
　GPT-3.5-Turbo, GPT-3.5-Turbo-16K(免费版不支持), &#13;
　GPT-4, DALLE(免费版不支持), &#13;
　Whisper(免费版不支持)&#13;
　免费版就可以支持AutoGPT, gpt_academic, langchain等&#13;
　免费版支持gpt-4，一天3次；&#13;
★支持gpt-4o-mini，和gpt-3.5-turbo共享一天200次。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/32.html</guid><pubDate>Mon, 13 Jan 2025 14:12:12 +0000</pubDate></item><item><title>Vol.31 CF 挂Vless/Trojan节点（ERROR1101 对策）</title><link>https://blog.grapehut.us.kg/post/31.html</link><description># 新建Worker&#13;
CF里创建一个worker（worker名字任意，如 cf996），初始脚本（work.js） 为默认Helloworld 即可&#13;
CF会自动生成worker网址   如：https://cf996.hst1189.workers.dev&#13;
&#13;
&#13;
# 脚本地址&#13;
替换默认脚本 work.js 后部署&#13;
为了防止ERROR1101 , 建议使用以下混淆代码&#13;
https://github.com/yonggekkk/Cloudflare_vless_trojan&#13;
✓[Vless_workers_pages](https://github.com/yonggekkk/Cloudflare_vless_trojan/tree/main/Vless_workers_pages)&#13;
✓[Trojan_workers_pages](https://github.com/yonggekkk/Cloudflare_vless_trojan/tree/main/Trojan_workers_pages)&#13;
&#13;
&#13;
# Worker添加变量&#13;
### 1. Vless节点的变量设置&#13;
&#13;
`Gmeek-html&lt;img src='../imgs/vlessnode/clouDNS0.PNG'&gt;`&#13;
&#13;
```&#13;
建议修改） uuid ⇒ 8cda8d90-9c66-4f59-8f98-d433d6238a8c&#13;
默认即可）proxyip ⇒ 默认443端口：ipv4地址、ipv6地址、域名（非443端口：ipv4地址/ipv6地址/域名：端口）&#13;
默认即可）ip1 ~ ip13 ⇒ 订阅节点：优选IP&#13;
默认即可）pt1 ~ pt13 ⇒ 订阅节点：优选IP对应端口&#13;
```&#13;
&#13;
&gt; [!TIP]&#13;
&gt; uuid 获取方式&#13;
```&#13;
cmd ⇒ Powershell -NoExit -Command '[guid]::NewGuid()&#13;
```&#13;
&#13;
&#13;
&#13;
### 2. Trojan节点的变量设置&#13;
```&#13;
建议修改）pswd ⇒ 万人骑密码：trojan&#13;
默认即可）proxyip ⇒ 默认443端口：ipv4地址、ipv6地址、域名（非443端口：ipv4地址/ipv6地址/域名：端口）&#13;
默认即可）ip1 ~ ip13 ⇒ 订阅节点：优选IP&#13;
默认即可）pt1 ~ pt13 ⇒ 订阅节点：优选IP对应端口&#13;
```&#13;
&#13;
&#13;
# 获取链接地址&#13;
上述变量设置以后，部署，更新网址 ↓&#13;
https://cf996.hst1189.workers.dev/8cda8d90-9c66-4f59-8f98-d433d6238a8c&#13;
打开此网址，找到里面的链接，黏贴到软件里即可&#13;
&#13;
&#13;
# 绑定域名（可选，被墙对策）&#13;
CF的worker 域名（https://*. workers.dev）被墙的话，可以通过绑定域名回避&#13;
1. CF里添加网站 cf996.ip-ddns.com（通过clouDNS免费获得）&#13;
2. clouDNS 添加DNS解释 A2个，NS2个（双向解析，如下图，必须和CF设置同步一致）&#13;
3. CF里的worker 绑定自定义域名（test.cf996.ip-ddns.com、※必须添加前缀，clouDNS的根域名无法绑定）&#13;
4. CF里自动添加 worker解析  ，相应的在clouDNS添加  worker的DNS解释 CNAME1个&#13;
5. 添加TSL的DNS解析  TXT2个（等待几分钟~数小时）&#13;
&#13;
&#13;
下图绑定 clouDNS的免费域名为例：&#13;
`Gmeek-html&lt;img src='../imgs/vlessnode/clouDNS1.PNG'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/vlessnode/clouDNS2.PNG'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/vlessnode/clouDNS3.PNG'&gt;`&#13;
&#13;
 &#13;
```&#13;
原始网址：&#13;
https://cf996.hst1189.workers.dev/8cda8d90-9c66-4f59-8f98-d433d6238a8c&#13;
&#13;
绑定域名后：&#13;
https://test.cf996.ip-ddns.com/8cda8d90-9c66-4f59-8f98-d433d6238a8c&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
# 常用软件&#13;
1、安卓Android：[v2rayNG](https://github.com/2dust/v2rayNG/tags)、[Nekobox](https://github.com/starifly/NekoBoxForAndroid/releases)、[Karing](https://github.com/KaringX/karing/tags)、v2box&#13;
&#13;
2、电脑Windows：[v2rayN](https://github.com/2dust/v2rayN/tags)、[Hiddify](https://github.com/hiddify/hiddify-next/tags)、[Karing](https://github.com/KaringX/karing/tags)&#13;
&#13;
3、苹果Ios：Karing、Hiddify Proxy &amp; VPN、Shadowrocket(小火箭)、Streisand、v2box&#13;
&#13;
4、软路由Openwrt：[homeproxy](https://github.com/kiddin9/openwrt-packages)，建议使用系统自带的软件库查找更新&#13;
&#13;
注意：其他平台客户端未开启分片功能情况下，workers域的6个443系TLS节点是不可用的&#13;
&#13;
注意：Shadowrocket(小火箭)、v2box、v2rayn、v2rayng客户端对trojan+ws有强制开启TLS问题，造成trojan+ws不通。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/31.html</guid><pubDate>Mon, 13 Jan 2025 06:08:14 +0000</pubDate></item><item><title>Vol.30 Windowsパッケージ管理 Scoop</title><link>https://blog.grapehut.us.kg/post/30.html</link><description># Windows でのパッケージ管理は Scoop&#13;
&#13;
&#13;
最近、Windows 上で Powershell を使ってちょっとした開発を行った際に、Powershell のコマンド分からん…! となっていたんですが、Scoop というパッケージマネージャーを使って Linux 系のコマンドだったりパッケージをインストールすることで開発しやすくなりました。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/30.html</guid><pubDate>Sat, 11 Jan 2025 13:13:52 +0000</pubDate></item><item><title>Vol.29 免费获取Open API &amp; 利用实例</title><link>https://blog.grapehut.us.kg/post/29.html</link><description># OpenAI API
### 1. https://github.com/chatanywhere/GPT_API_free
支持 gpt-3.5-turbo系列 / gpt-4系列 / gpt-4o系列 / gpt-4o-audio-preview / embeddings / DALL·E / whisper 等，国内动态加速 直连无需代理
```
支持Models, 
　Embedding, 
　text-davinci(免费版不支持), 
　GPT-3.5-Turbo, GPT-3.5-Turbo-16K(免费版不支持), 
　GPT-4, DALLE(免费版不支持), 
　Whisper(免费版不支持)
　免费版就可以支持AutoGPT, gpt_academic, langchain等
　免费版支持gpt-4，一天3次；
★支持gpt-4o-mini，和gpt-3.5-turbo共享一天200次。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/29.html</guid><pubDate>Sun, 05 Jan 2025 13:33:04 +0000</pubDate></item><item><title>Vol.28 Win开启SMB共享</title><link>https://blog.grapehut.us.kg/post/28.html</link><description># 不要使用 SMB1&#13;
SMB1 可以追溯到20世纪80年代 IBM 和 [微软](https://pinpai.smzdm.com/1461/)的DOS 时代&#13;
距离今天已经有三十多年的时间，当时计算机安全还不存在，它在拦截攻击方面有重大的架构问题&#13;
如今版本的 windows 10/11 都默认禁用了 SMB1，因此如果还在使用这一协议的话，强烈建议关闭&#13;
&#13;
&#13;
# 安全使用 SMB 共享的步骤&#13;
这里提供一个简单的，可以在工作或家庭的局域网中显著提高安全性且不会太复杂的 SMB 共享设置方法&#13;
&#13;
1. 新建一个用户专门用于共享文件的授权，并设置此用户的权限&#13;
2. 设置网络共享和系统安全的相关设置&#13;
3. 开启共享，授权指定用户&#13;
&#13;
&#13;
## 1. 创建专用的用户&#13;
新建一个本地用户，此用户只用在 SMB 共享&#13;
```&#13;
 右键我的电脑⇒　管理⇒　本地用户和组⇒　用户⇒　右键空白处，点击“新用户”&#13;
```&#13;
&#13;
新建账号为 'joker' 的用户为例，相关设置如下：　&#13;
只用于共享，因此设置**不能更改密码**，**密码不会过期**&#13;
&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb0.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb1.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb2.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb3.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb4.png'&gt;`&#13;
&#13;
&#13;
## 2. 设置网络共享和系统安全的相关设置&#13;
&#13;
#### 分配用户权限&#13;
```&#13;
按住 win + R，在“运行”窗口中输入  `secpol.msc`, 打开 “本地安全策略”设置窗口：&#13;
本地策略⇒　用户权限分配&#13;
```&#13;
- 从网络访问此计算机：只有授权的用户能够通过网络来访问到本机上的共享文件资源（包括共享的打印机）&#13;
- 拒绝本地登录：即不允许特定用户在本电脑上进行登录&#13;
- 拒绝通过远程桌面服务登录：即不允许此账户使用远程桌面登录到本系统&#13;
&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb8.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb9.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb14.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb10.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb11.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb12.png'&gt;`&#13;
`Gmeek-html&lt;img src='../imgs/smb/smb13.png'&gt;`&#13;
&#13;
设置好之后，joker 用户就无法本地登录到系统，同时也无法通过远程桌面的形式登录到本机，&#13;
目的就是让 joker 只能用来 SMB 共享。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/28.html</guid><pubDate>Tue, 24 Dec 2024 06:00:06 +0000</pubDate></item><item><title>Vol.27 设置家用服务器</title><link>https://blog.grapehut.us.kg/post/27.html</link><description># 1. 安装Ubuntu系统&#13;
Linux发行版Ubuntu24.04LTS　　※LTS的意思是'长期支持'&#13;
https://releases.ubuntu.com/24.04.1/ubuntu-24.04.1-desktop-amd64.iso&#13;
&#13;
&#13;
# 2. 绑定静态IP&#13;
打开路由器设置---&gt;局域网设置--&gt;DHCP静态IP设置，分配一个固定IP，比如192.168.0.100。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/27.html</guid><pubDate>Thu, 19 Dec 2024 06:42:55 +0000</pubDate></item><item><title>Vol.26 白嫖Deepl（免开会员） 沉静式翻译设置Deeplx</title><link>https://blog.grapehut.us.kg/post/26.html</link><description>&gt; 引用： https://linux.do/t/topic/111911&#13;
&#13;
# 1. chromewebstore下载插件   沉静式翻译&#13;
[沉浸式翻译 - 网页翻译插件 | PDF翻译 | 免费](&#13;
https://chromewebstore.google.com/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-pdf%E7%BF%BB%E8%AF%91-%E5%85%8D%E8%B4%B9/bpoadfkcbjbfhfodiogcnhhhpibjhbnh)&#13;
&#13;
&#13;
# 2. 设置里面打开【开发者选项】&#13;
`Gmeek-html&lt;img src='../imgs/DeeplxKey1.png'&gt;`&#13;
&#13;
&#13;
# 3. 翻译服务里面打开DeepLX(Beta)&#13;
`Gmeek-html&lt;img src='../imgs/DeeplxKey2.png'&gt;`&#13;
&#13;
# 4. 去基本设置里面你的URL&#13;
〇　`https://api.deeplx.org/&lt;api-key&gt;/translate`      #在liunx.do申请api-key&#13;
✖　`https://api.deeplx.org/translate`      #不可用&#13;
&#13;
`Gmeek-html&lt;img src='../imgs/DeeplxKey3.png'&gt;`&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/26.html</guid><pubDate>Wed, 18 Dec 2024 15:04:02 +0000</pubDate></item><item><title>Vol.25 白嫖AWS（免费一年）</title><link>https://blog.grapehut.us.kg/post/25.html</link><description># 注册&#13;
1. 注册aws账号（需要信用卡，验证时会扣除1美元或等值的货币）&#13;
https://aws.amazon.com/cn/campaigns/nc20241101/&#13;
&#13;
2. 选择免费额度的配置来创建一个EC2实例&#13;
    名称： 任意填写&#13;
    系统：任意选择 （选择平时常用系统  例如：`Ubuntu`）&#13;
    选择硬件配置（选择默认的免费）&#13;
    实例类型（默认的`t2.mirco`即可）&#13;
    创建密钥（保存为`xxx.pem`，下载到本地， ssh联接用）&#13;
    创建安全组（允许`SSH ✓`，`HTTP ✓`，`HTTPS  ✓`） &#13;
    配置存储（免费最大30GB）&#13;
&#13;
3. 确认一下实体配置信息，启动实体&#13;
&#13;
4. 进入实体，查看公有IP，进行ssh链接，使用下载到本地的密钥（`xxx.pem`） ，选择Ubuntu的话，默认用户名：`ubuntu`&#13;
&#13;
5. `sudo -i`  进入root权限&#13;
&#13;
6. 安装Docker&#13;
```&#13;
curl -fsSL https://get.docker.com | sh    #安装Docker&#13;
systemctl enable --now docker             #启动Docker服务&#13;
docker -v                                 #查看docker版本，检查是否安装成功&#13;
docker ps -a                            #查看docker中所有容器&#13;
```&#13;
&#13;
&#13;
7. 开放端口，设置安全组&#13;
`Gmeek-html&lt;img src='../imgs/aws_security_rull.png'&gt;`&#13;
&#13;
&gt; [!TIP]&#13;
&gt; http 的默认端口: 80&#13;
&gt; https 的默认端口: 433&#13;
&gt; ssh 的默认端口: 22&#13;
&gt; telnet 的默认端口: 23&#13;
&gt; ftp 的默认端口: 20 和 21 ，  20负责连接，21负责传输数据&#13;
&gt; sftp 的默认端口: 22&#13;
&#13;
&#13;
&#13;
&#13;
# 常见问题&#13;
&#13;
## 无法ping的解决方案&#13;
首先Ping只是向服务器发送ICMP的数据包，如果在服务器的防火墙没有允许ICMP协议的数据包的话，那么即使服务器正常运行，那也是ping不同的。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/25.html</guid><pubDate>Tue, 17 Dec 2024 15:42:07 +0000</pubDate></item><item><title>Vol.24 本地构建ChatGPT</title><link>https://blog.grapehut.us.kg/post/24.html</link><description># 创建一个本地ChatGPT&#13;
&#13;
### 0. 前提&#13;
本地Linux（window可以利用wsl），或者VPS上构建 Linux&#13;
&#13;
### 1. 安装docker环境&#13;
```&#13;
curl -fsSL https://get.docker.com | sh    #安装Docker&#13;
systemctl enable --now docker             #启动Docker服务&#13;
docker -v                                 #查看docker版本，检查是否安装成功&#13;
```&#13;
&#13;
### 2. 安装NextChat&#13;
```&#13;
docker pull yidadaa/chatgpt-next-web      #从docker拉取（https://hub.docker.com/r/yidadaa/chatgpt-next-web）&#13;
&#13;
docker run -d -p 3000:3000 \             #启动容器  端口号3000&#13;
   -e OPENAI_API_KEY=sk-xxxx \           #KEY通过 https://platform.openai.com/api-keys 获取&#13;
   -e CODE=页面访问密码 \                 #密码可以为空&#13;
   yidadaa/chatgpt-next-web &#13;
&#13;
例：&#13;
docker run -d -p 3000:3000 \&#13;
   -e OPENAI_API_KEY=sk-xxxx \&#13;
   -e CODE= \&#13;
   yidadaa/chatgpt-next-web&#13;
&#13;
docker ps -a                             #查看docker容器状态&#13;
```&#13;
&#13;
### 3. 打开网页，即开即用&#13;
http://127.0.0.1:3000/&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/24.html</guid><pubDate>Tue, 17 Dec 2024 12:28:35 +0000</pubDate></item><item><title>Vol.23 油猴（Tampermonkey)</title><link>https://blog.grapehut.us.kg/post/23.html</link><description># 比較&#13;
|| Greasemonkey | Violentmonkey | Tampermonkey| Scriptcat&#13;
-- |-- | -- | --|--&#13;
Firefox | 〇 | 〇 | 〇|〇&#13;
Chrome | × | 〇 | 〇|〇&#13;
Safari | × | × | 〇|〇&#13;
外部エディタ | × | 〇 | 〇|〇&#13;
インポート/エクスポート | 〇 | 〇 | 〇|〇&#13;
Dropbox 同期 | × | 〇 | 〇|×&#13;
Google Drive 同期 | × | 〇 | 〇|×&#13;
One Drive 同期 | × | 〇 | 〇|×&#13;
WebDAV 同期 | × | 〇 | 〇|×&#13;
Yandex Disk 同期 | × | × | 〇|×&#13;
ライセンス | MIT | MIT | proprietary |GPL-3.0 license&#13;
リポジトリ | [GitHub](https://github.com/greasemonkey/greasemonkey/) | [GitHub](https://github.com/violentmonkey/violentmonkey) | [2018 年更新停止](https://github.com/Tampermonkey/tampermonkey)|[GitHub](https://github.com/scriptscat/scriptcat)&#13;
公式サイト | [公式サイト](https://www.greasespot.net/) | [公式サイト](https://violentmonkey.github.io/) | [公式サイト](https://www.tampermonkey.net/)| [公式サイト](https://docs.scriptcat.org)&#13;
Initial release | 2005/03/28 | 2013/09/03 | 2010/05/26|&#13;
&#13;
# 脚本&#13;
  - https://greasyfork.org/scripts&#13;
  - https://sleazyfork.org/scripts&#13;
  - https://scriptcat.org/en/search&#13;
&#13;
---&#13;
  - https://greasyfork.org/ja/scripts/459541&#13;
  - https://greasyfork.org/ja/scripts/467776&#13;
  - https://greasyfork.org/ja/scripts/424913&#13;
  - https://greasyfork.org/ja/scripts/449581&#13;
  - https://greasyfork.org/ja/scripts/446342&#13;
  - https://greasyfork.org/ja/scripts/471333&#13;
  - https://greasyfork.org/ja/scripts/484953&#13;
  - https://greasyfork.org/ja/scripts/438684&#13;
 &#13;
  - https://sleazyfork.org/zh-CN/scripts/432150&#13;
  - https://sleazyfork.org/zh-CN/scripts/463305&#13;
  - https://sleazyfork.org/zh-CN/scripts/509466&#13;
  - https://sleazyfork.org/zh-CN/scripts/441120&#13;
  - https://sleazyfork.org/zh-CN/scripts/499213&#13;
  - https://sleazyfork.org/zh-CN/scripts/374903&#13;
  - https://sleazyfork.org/zh-CN/scripts/428639&#13;
  ---&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/23.html</guid><pubDate>Sat, 07 Dec 2024 12:03:52 +0000</pubDate></item><item><title>Vol.22  使用Portableapps.com Launcher制作便携软件 实例教程</title><link>https://blog.grapehut.us.kg/post/22.html</link><description># 前言&#13;
`PortableApps.com Launcher`（以下简称PAL）是`PortableApps.com`开发的便携软件制作工具。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/22.html</guid><pubDate>Fri, 29 Nov 2024 14:57:31 +0000</pubDate></item><item><title>Vol.21 批量获取免费的VPN节点</title><link>https://blog.grapehut.us.kg/post/21.html</link><description># 【基礎篇】&#13;
&#13;
这个免费的代理节点主要是来自BPB-Worker-Panel 面板的漏洞利用&#13;
&#13;
- 下载V2ray 客户端：【 [GitHub 开源项目](https://github.com/2dust/v2rayN)】&#13;
&#13;
- 在V2ray 导入下方的代码：　菜单「服务器」→  从剪贴板导入链接&#13;
```&#13;
trojan://bpb-trojan@www.vpslook.com:443?security=tls&amp;sni=这里填域名&amp;alpn=h3&amp;fp=randomized&amp;allowlnsecure=1&amp;type=ws&amp;host=这里填域名&amp;path=%2Ftr%3Fed%3D2560#BPB&#13;
&#13;
伪装域名(host)：需要替换&#13;
SNI：需要替换&#13;
```&#13;
&#13;
- 免费获取BPB面板的后台地址：&#13;
&#13;
【[点击获取](https://fofa.info/result?qbase64=aWNvbl9oYXNoPSItMTM1NDAyNzMxOSIgJiYgYXNuPSIxMzMzNSIgJiYgcG9ydD0iNDQzIg%3D%3D)】443端口&#13;
&#13;
【[点击获取](https://fofa.info/result?qbase64=aWNvbl9oYXNoPSItMTM1NDAyNzMxOSIgJiYgYXNuPSIxMzMzNSIgJiYgcG9ydD0iODAi)】80端口&#13;
&#13;
打开后获取到大量的BPB-Worker-Panel 面板地址，只需在连接后面加上/login，就可以看到BBP面板的后台，`版本号是2.5.3 以上`就可以直接免费导入使用！&#13;
&#13;
- 然后把获得的地址填写到V2ray客户端里，如下所示：&#13;
`Gmeek-html&lt;img src='https://www.freedidi.com/wp-content/uploads/2024/11/2fed20789620241124163317-2079x1440.webp'&gt;`&#13;
&#13;
&#13;
# 【高阶篇】&#13;
&#13;
- 需要安装下Python，没有安装的可以前往【[python官网】](https://www.python.org/)进行下载安装，推荐[python3.10.3](https://www.python.org/downloads/release/python-3103/) 版本&#13;
&#13;
- 安装下 Python 依赖库&#13;
&#13;
```&#13;
pip install requests beautifulsoup4&#13;
pip install selenium&#13;
```&#13;
如果报错，提示找不到package，可能python版本比较低，可以通过下面的命令解决&#13;
&#13;
```&#13;
pip install selenium requests beautifulsoup4 packaging&#13;
 ```&#13;
&#13;
- 把下面的代码另存为一个vpn.py&#13;
&#13;
```&#13;
import requests&#13;
from bs4 import BeautifulSoup&#13;
from packaging import version  # 用于比较版本号&#13;
&#13;
# FOFA 查询页面 URL&#13;
FOFA_URL = 'https://fofa.info/result?qbase64=aWNvbl9oYXNoPSItMTM1NDAyNzMxOSIgJiYgYXNuPSIxMzMzNSIgJiYgcG9ydD0iNDQzIg%3D%3D'&#13;
&#13;
# 文件名定义&#13;
OUTPUT_FILE_1 = '1.txt'&#13;
OUTPUT_FILE_2 = '2.txt'&#13;
OUTPUT_FILE_OK = 'OK.txt'&#13;
&#13;
def get_fofa_results():&#13;
import requests&#13;
from bs4 import BeautifulSoup&#13;
from packaging import version  # 用于比较版本号&#13;
&#13;
# FOFA 查询页面 URL&#13;
FOFA_URL = 'https://fofa.info/result?qbase64=aWNvbl9oYXNoPSItMTM1NDAyNzMxOSIgJiYgYXNuPSIxMzMzNSIgJiYgcG9ydD0iNDQzIg%3D%3D'&#13;
&#13;
# 文件名定义&#13;
OUTPUT_FILE_1 = '1.txt'&#13;
OUTPUT_FILE_2 = '2.txt'&#13;
OUTPUT_FILE_OK = 'OK.txt'&#13;
&#13;
def get_fofa_results():&#13;
    '''抓取 FOFA 页面并提取结果地址'''&#13;
    print('正在抓取 FOFA 页面...')&#13;
    response = requests.get(FOFA_URL)&#13;
    if response.status_code != 200:&#13;
        print(f'无法访问 FOFA 页面，状态码：{response.status_code}')&#13;
        return []&#13;
&#13;
    # 使用 BeautifulSoup 解析 HTML 内容&#13;
    soup = BeautifulSoup(response.text, 'html.parser')&#13;
    results = []&#13;
&#13;
    # 查找所有结果链接&#13;
    for link in soup.find_all('a', href=True):&#13;
        url = link['href']&#13;
        if url.startswith('https://'):  # 提取 https 开头的链接&#13;
            results.append(url)&#13;
&#13;
    print(f'提取到 {len(results)} 个地址')&#13;
    return results&#13;
&#13;
def append_login_to_urls(input_file, output_file):&#13;
    '''将地址加上 /login 并保存到新文件'''&#13;
    print(f'正在处理 {input_file}，将地址加上 /login 并保存到 {output_file}...')&#13;
    with open(input_file, 'r', encoding='utf-8') as infile, open(output_file, 'w', encoding='utf-8') as outfile:&#13;
        for line in infile:&#13;
            url = line.strip() + '/login'&#13;
            outfile.write(url + '\n')&#13;
    print(f'已完成地址追加，结果保存到 {output_file}')&#13;
&#13;
def check_bpb_version(input_file, output_file):&#13;
    '''访问地址并检查 BPB Panel 的版本号'''&#13;
    print(f'正在验证 {input_file} 中的地址...')&#13;
    headers = {&#13;
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36'&#13;
    }&#13;
    min_version = version.parse('2.5.3')  # 最低版本号&#13;
    with open(input_file, 'r', encoding='utf-8') as infile, open(output_file, 'w', encoding='utf-8') as outfile:&#13;
        for line in infile:&#13;
            url = line.strip()&#13;
            try:&#13;
                response = requests.get(url, headers=headers, timeout=10)&#13;
                if response.status_code == 200 and 'BPB Panel' in response.text:&#13;
                    # 提取版本号&#13;
                    raw_version = extract_version(response.text)&#13;
                    if raw_version:&#13;
                        parsed_version = version.parse(raw_version)&#13;
                        if parsed_version &gt; min_version:&#13;
                            print(f'[匹配] {url} (版本号: {parsed_version})')&#13;
                            outfile.write(url + '\n')&#13;
            except Exception as e:&#13;
                print(f'[错误] 无法访问 {url}，错误：{e}')&#13;
    print(f'验证完成，符合条件的地址保存到 {output_file}')&#13;
&#13;
def extract_version(html):&#13;
    '''从 HTML 内容中提取 BPB Panel 的版本号'''&#13;
    if 'BPB Panel' in html:&#13;
        start_index = html.find('BPB Panel')&#13;
        # 提取版本号（假设版本号以 2 开头）&#13;
        version_start = html.find('2', start_index)&#13;
        version_end = version_start&#13;
        while version_end &lt; len(html) and (html[version_end].isdigit() or html[version_end] == '.'):&#13;
            version_end += 1&#13;
        return html[version_start:version_end]&#13;
    return None&#13;
&#13;
def main():&#13;
    # 第一步：抓取 FOFA 页面结果并保存到 1.txt&#13;
    urls = get_fofa_results()&#13;
    with open(OUTPUT_FILE_1, 'w', encoding='utf-8') as f:&#13;
        for url in urls:&#13;
            f.write(url + '\n')&#13;
    print(f'FOFA 页面结果已保存到 {OUTPUT_FILE_1}')&#13;
&#13;
    # 第二步：将 1.txt 地址加上 /login 并保存到 2.txt&#13;
    append_login_to_urls(OUTPUT_FILE_1, OUTPUT_FILE_2)&#13;
&#13;
    # 第三步：验证 2.txt 中的地址，符合条件的保存到 OK.txt&#13;
    check_bpb_version(OUTPUT_FILE_2, OUTPUT_FILE_OK)&#13;
&#13;
if __name__ == '__main__':&#13;
    main()&#13;
```&#13;
&#13;
- 最后在终端下执行命令：&#13;
&#13;
```&#13;
python vpn.py&#13;
```&#13;
&#13;
在脚本的所在目录会生成结果OK.txt，里面就是我们需要的地址！&#13;
&#13;
`Gmeek-html&lt;img src='https://www.freedidi.com/wp-content/uploads/2024/11/c85b610e7e20241124163116-2081x1440.webp'&gt;`&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; 默认我只获取了第一个页面，因为如果批量获取分页的话，会引起网站防火墙的拦截。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/21.html</guid><pubDate>Tue, 26 Nov 2024 14:47:33 +0000</pubDate></item><item><title>Vol.19 如何找到Shopify中国卖家网站</title><link>https://blog.grapehut.us.kg/post/19.html</link><description>&#13;
## 你想知道别人的Shopify网站怎么做的吗？&#13;
&#13;
一个傻瓜式的方式教大家如何找到Shopify中国卖家的网站（当然也可以找国外的）。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/19.html</guid><pubDate>Sun, 03 Nov 2024 13:59:27 +0000</pubDate></item><item><title>Vol.18 jsdelivr CDN</title><link>https://blog.grapehut.us.kg/post/18.html</link><description># 关于jsdelivr &#13;
&gt; https://www.jsdelivr.com/&#13;
&#13;
## jsdelivr CDN 和 GitHub 的关系&#13;
jsdelivr 是一个免费且可靠的内容分发网络（CDN）服务，允许开发者将静态资源存储在 GitHub 仓库中，并通过 jsdelivr 进行全球加速访问。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/18.html</guid><pubDate>Sun, 03 Nov 2024 09:00:24 +0000</pubDate></item><item><title>Vol.17 Omakub 专为开发者设计的 Ubuntu</title><link>https://blog.grapehut.us.kg/post/17.html</link><description># 前言&#13;
Omakub 是一个专为开发者设计的 Ubuntu 环境配置项目，由 Ruby on Rails 的创造者 David Heinemeier Hansson（DHH）发起。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/17.html</guid><pubDate>Sun, 27 Oct 2024 15:29:54 +0000</pubDate></item><item><title>Vol.16 Chrome 命令大全 chrome:// 设置</title><link>https://blog.grapehut.us.kg/post/16.html</link><description># Chrome 命令大全&#13;
&#13;
### 查看命令一览&#13;
```&#13;
chrome://about&#13;
chrome://chrome-urls&#13;
```&#13;
&#13;
### List of Chrome URLs&#13;
命令|説明|備考&#13;
---|---|---&#13;
chrome://about|查看命令一览&#13;
chrome://accessibility|&#13;
chrome://app-service-internals|&#13;
chrome://app-settings|&#13;
chrome://apps|Googleアプリ&#13;
chrome://attribution-internals|&#13;
chrome://autofill-internals|&#13;
chrome://blob-internals|&#13;
chrome://bluetooth-internals|&#13;
chrome://bookmarks|收藏夹          &#13;
chrome://bookmarks-side-panel.top-chrome|&#13;
chrome://cast-feedback|&#13;
chrome://certificate-manager|&#13;
chrome://chrome-urls|查看命令一览&#13;
chrome://commerce-internals|&#13;
chrome://compare|&#13;
chrome://components|&#13;
chrome://conflicts|&#13;
chrome://connectors-internals|&#13;
chrome://crashes|崩溃报告&#13;
chrome://credits|&#13;
chrome://customize-chrome-side-panel.top-chrome|&#13;
chrome://data-sharing-internals|&#13;
chrome://device-log|&#13;
chrome://dino|恐龙游戏|❤&#13;
chrome://discards/&#13;
chrome://downloads|下载一览&#13;
chrome://download-internals|&#13;
chrome://extensions|扩展一览&#13;
chrome://extensions-internals|&#13;
chrome://family-link-user-internals|&#13;
chrome://feedback|&#13;
chrome://flags|实验性功能&#13;
chrome://gcm-internals|&#13;
chrome://gpu|GPU信息&#13;
chrome://help|&#13;
chrome://histograms|&#13;
chrome://history|Web浏览履歴一览&#13;
chrome://history-clusters-internals|&#13;
chrome://history-clusters-side-panel.top-chrome|&#13;
chrome://indexeddb-internals|&#13;
chrome://inspect|设备和页面检查&#13;
chrome://interstitials|&#13;
chrome://lens-search-bubble|&#13;
chrome://local-state|&#13;
chrome://location-internals|&#13;
chrome://management|&#13;
chrome://media-engagement|&#13;
chrome://media-internals|媒体播放信息&#13;
chrome://memory-internals|内存使用量&#13;
chrome://metrics-internals|&#13;
chrome://net-export|网络日志&#13;
chrome://net-internals|网络诊断&#13;
chrome://network-errors|网络错误&#13;
chrome://new-tab-page|新建网页&#13;
chrome://new-tab-page-third-party|&#13;
chrome://newtab|新建网页&#13;
chrome://ntp-tiles-internals|&#13;
chrome://omnibox|&#13;
chrome://on-device-internals|&#13;
chrome://optimization-guide-internals|&#13;
chrome://password-manager|密码保管&#13;
chrome://password-manager-internals|&#13;
chrome://policy|查看策略设置&#13;
chrome://predictors|&#13;
chrome://prefs-internals|&#13;
chrome://print|打印预览&#13;
chrome://private-aggregation-internals|&#13;
chrome://process-internals|&#13;
chrome://profile-internals|用户信息|❤&#13;
chrome://quota-internals|磁盘利用信息&#13;
chrome://read-later.top-chrome/|&#13;
chrome://safe-browsing|&#13;
chrome://sandbox|&#13;
chrome://serviceworker-internals|&#13;
chrome://settings|chrome设定|❤&#13;
chrome://shopping-insights-side-panel.top-chrome|&#13;
chrome://signin-internals|&#13;
chrome://site-engagement|网站浏览频度|❤&#13;
chrome://suggest-internals|&#13;
chrome://sync-internals|同步信息|❤&#13;
chrome://system|chrome系统信息&#13;
chrome://tab-search.top-chrome|标签页搜索&#13;
chrome://terms|&#13;
chrome://topics-internals|&#13;
chrome://traces-internals|&#13;
chrome://tracing|&#13;
chrome://translate-internals|&#13;
chrome://ukm|&#13;
chrome://usb-internals|&#13;
chrome://user-actions|&#13;
chrome://version|chrome版本&#13;
chrome://web-app-internals|&#13;
chrome://webrtc-internals|WebRTC详细信息&#13;
chrome://webrtc-logs|&#13;
chrome://webxr-internals|&#13;
chrome://whats-new|chrome最新情報&#13;
chrome-untrusted://companion-side-panel.top-chrome|&#13;
chrome-untrusted://compose|&#13;
chrome-untrusted://data-sharing|&#13;
chrome-untrusted://hats|&#13;
chrome-untrusted://lens|&#13;
chrome-untrusted://print|&#13;
chrome-untrusted://read-anything-side-panel.top-chrome|&#13;
&#13;
&#13;
### List of chrome://internals pages&#13;
```&#13;
chrome://internals/session-service&#13;
```&#13;
&#13;
&#13;
### For Debug&#13;
The following pages are for debugging purposes only. Because they crash or hang the renderer, they're not linked directly; you can type them into the address bar if you need them.&#13;
```&#13;
chrome://badcastcrash/&#13;
chrome://inducebrowsercrashforrealz/&#13;
chrome://inducebrowserdcheckforrealz/&#13;
chrome://crash/&#13;
chrome://crash/rust&#13;
chrome://crashdump/&#13;
chrome://kill/&#13;
chrome://hang/&#13;
chrome://shorthang/&#13;
chrome://gpuclean/&#13;
chrome://gpucrash/&#13;
chrome://gpuhang/&#13;
chrome://memory-exhaust/&#13;
chrome://memory-pressure-critical/&#13;
chrome://memory-pressure-moderate/&#13;
chrome://inducebrowserheapcorruption/&#13;
chrome://crash/cfg&#13;
chrome://heapcorruptioncrash/&#13;
chrome://quit/&#13;
chrome://restart&#13;
```&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/16.html</guid><pubDate>Sat, 12 Oct 2024 03:00:14 +0000</pubDate></item><item><title>Vol.14 虚拟机hyper-v安装openwrt软路由</title><link>https://blog.grapehut.us.kg/post/14.html</link><description># 事前准备&#13;
&#13;
### 1. 下载 OpenWrt 镜像&#13;
骷髅大佬版本：[DHDAXCW/OpenWRT_x86_x64](https://github.com/DHDAXCW/OpenWRT_x86_x64/releases)&#13;
&#13;
`ext4` 文件系统镜像可以对任何改动都进行持久化存储，&#13;
`squashfs` 一般情况下对文件系统的改动无法持久化，每次重启都会重置更改，但便于从错误配置中重置。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/14.html</guid><pubDate>Wed, 02 Oct 2024 13:10:21 +0000</pubDate></item><item><title>Vol.13 Windows KMS激活</title><link>https://blog.grapehut.us.kg/post/13.html</link><description>```&#13;
# Windows 11 LTSC 2024&#13;
tiny11_24H2&#13;
　https://archive.org/details/tiny11-2409 &#13;
　✓tiny11 24H2 AMD64.iso&#13;
　SHA256：87c926dcb9c2927a0d67c5f4084308c61a29581e259e6f4d9ebd36f44c79559a&#13;
&#13;
Windows 11 Insider Preview Build 26100 Enterprise LTSC English x86-64&#13;
　https://archive.org/details/26100-ltsc-x64-enus&#13;
　✓26100.1.240331-1435.ge_release_CLIENT_ENTERPRISES_OEM_x64FRE_en-us.iso&#13;
```&#13;
&#13;
```&#13;
# Windows 11 LTSC KMS激活&#13;
slmgr -ipk M7XTQ-FN8P6-TTKYV-9D4CC-J462D&#13;
slmgr -skms kms.0t.net.cn&#13;
slmgr -ato&#13;
```&#13;
&#13;
```&#13;
# Windows MAS激活&#13;
irm https://massgrave.dev/get | iex&#13;
```&#13;
&#13;
```&#13;
#Office 2021 Pro plus&#13;
https://archive.org/details/microsoft_volume_license_office_2019_202110&#13;
https://github.com/massgravel/Microsoft-Activation-Scripts&#13;
8WXTP-MN628-KY44G-VJWCK-C7PCF&#13;
```&#13;
&#13;
&#13;
&#13;
# Windows&#13;
&#13;
&gt; 引用： https://learn.microsoft.com/ja-jp/windows-server/get-started/kms-client-activation-keys&#13;
&#13;
## Windows 11 零售版 RTM 通用安装密钥&#13;
&#13;
Windows 11 系统版本 | 通用 Key / 安装密钥 / 注册码&#13;
-- | --&#13;
Windows 11 Home | YTMG3-N6DKC-DKB77-7M9GH-8HVX7&#13;
Windows 11 Home N | 4CPRK-NM3K3-X6XXQ-RXX86-WXCHW&#13;
Windows 11 Home Single Language | BT79Q-G7N6G-PGBYW-4YWX6-6F4BT&#13;
Windows 11 Home Country Specific | N2434-X9D7W-8PF6X-8DV9T-8TYMD&#13;
Windows 11 Pro | VK7JG-NPHTM-C97JM-9MPGT-3V66T&#13;
Windows 11 Pro N | 2B87N-8KFHP-DKV6R-Y2C8J-PKCKT&#13;
Windows 11 Pro for Workstations | DXG7C-N36C4-C4HTG-X4T3X-2YV77&#13;
Windows 11 Pro for Workstations N | WYPNQ-8C467-V2W6J-TX4WX-WT2RQ&#13;
Windows 11 Pro Education | 8PTT6-RNW4C-6V7J2-C2D3X-MHBPB&#13;
Windows 11 Pro Education N | GJTYN-HDMQY-FRR76-HVGC7-QPF8P&#13;
Windows 11 Education | YNMGQ-8RYV3-4PGQ3-C8XTP-7CFBY&#13;
Windows 11 Education N | 84NGF-MHBT6-FXBX8-QWJK7-DRR8H&#13;
Windows 11 Enterprise | XGVPP-NMH47-7TTHJ-W3FW7-8HV2C&#13;
Windows 11 Enterprise N | WGGHN-J84D6-QYCPR-T7PJ7-X766F&#13;
Windows 11 Enterprise G N | FW7NV-4T673-HF4VX-9X4MM-B4H4T&#13;
&#13;
&#13;
## 适用于 KMS 激活的 Win11 安装序列号&#13;
&#13;
Windows 11 版本 | KMS 客户端安装序列号&#13;
-- | --&#13;
Windows 11 Home | TX9XD-98N7V-6WMQ6-BX7FG-H8Q99&#13;
Windows 11 Home N | 3KHY7-WNT83-DGQKR-F7HPR-844BM&#13;
Windows 11 Home Home Single Language | 7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH&#13;
Windows 11 Home Country Specific | PVMJN-6DFY6-9CCP6-7BKTT-D3WVR&#13;
Windows 11 Pro | W269N-WFGWX-YVC9B-4J6C9-T83GX&#13;
Windows 11 Pro N | MH37W-N47XK-V7XM9-C7227-GCQG9&#13;
Windows 11 Pro for Workstations | NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J&#13;
Windows 11 Pro for Workstations N | 9FNHH-K3HBT-3W4TD-6383H-6XYWF&#13;
Windows 11 Pro Education | 6TP4R-GNPTD-KYYHQ-7B7DP-J447Y&#13;
Windows 11 Pro Education N | YVWGF-BXNMC-HTQYQ-CPQ99-66QFC&#13;
Windows 11 Education | NW6C2-QMPVW-D7KKK-3GKT6-VCFB2&#13;
Windows 11 Education N | 2WH4N-8QGBV-H22JP-CT43Q-MDWWJ&#13;
Windows 11 Enterprise | NPPR9-FWDCX-D2C8J-H872K-2YT43&#13;
Windows 11 Enterprise N | DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4&#13;
Windows 11 Enterprise G | YYVX9-NTFWV-6MDM3-9PT4T-4M68B&#13;
Windows 11 Enterprise G N | 44RPN-FTY23-9VTTB-MP9BX-T84FV&#13;
Windows 11 Enterprise LTSC 2019 | M7XTQ-FN8P6-TTKYV-9D4CC-J462D&#13;
Windows 11 Enterprise N LTSC 2019 | 92NFX-8DJQP-P6BBQ-THF9C-7CG2H&#13;
&#13;
&#13;
&#13;
&#13;
## Windows Enterprise LTSC および LTSB &#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows 11 Enterprise LTSC 24H2 | M7XTQ-FN8P6-TTKYV-9D4CC-J462D&#13;
Windows 10 Enterprise LTSC 2021　\|　Windows 10 Enterprise LTSC 2019 | M7XTQ-FN8P6-TTKYV-9D4CC-J462D&#13;
Windows 10 Enterprise N LTSC 2021　\|　Windows 10 Enterprise N LTSC 2019 | 92NFX-8DJQP-P6BBQ-THF9C-7CG2H&#13;
&#13;
&#13;
## Windows 11 と Windows 10&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows 11 Pro　\|　Windows 10 Pro | W269N-WFGWX-YVC9B-4J6C9-T83GX&#13;
Windows 11 Pro N　\|　Windows 10 Pro N | MH37W-N47XK-V7XM9-C7227-GCQG9&#13;
Windows 11 Pro for Workstations　\|　Windows 10 Pro for Workstations | NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J&#13;
Windows 11 Pro for Workstations N　\|　Windows 10 Pro for Workstations N | 9FNHH-K3HBT-3W4TD-6383H-6XYWF&#13;
Windows 11 Pro Education　\|　Windows 10 Pro Education | 6TP4R-GNPTD-KYYHQ-7B7DP-J447Y&#13;
Windows 11 Pro Education N　\|　Windows 10 Pro Education N | YVWGF-BXNMC-HTQYQ-CPQ99-66QFC&#13;
Windows 11 Education　\|　Windows 10 Education | NW6C2-QMPVW-D7KKK-3GKT6-VCFB2&#13;
Windows 11 Education N　\|　Windows 10 Education N | 2WH4N-8QGBV-H22JP-CT43Q-MDWWJ&#13;
Windows 11 Enterprise　\|　Windows 10 Enterprise | NPPR9-FWDCX-D2C8J-H872K-2YT43&#13;
Windows 11 Enterprise N　\|　Windows 10 Enterprise N | DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4&#13;
Windows 11 Enterprise G　\|　Windows 10 Enterprise G | YYVX9-NTFWV-6MDM3-9PT4T-4M68B&#13;
Windows 11 Enterprise G N　\|　Windows 10 Enterprise G N | 44RPN-FTY23-9VTTB-MP9BX-T84FV&#13;
&#13;
## Windows 8.1&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows 8.1 Pro | GCRJD-8NW9H-F2CDX-CCM8D-9D6T9&#13;
Windows 8.1 Pro N | HMCNV-VVBFX-7HMBH-CTY9B-B4FXY&#13;
Windows 8.1 Enterprise | MHF9N-XY6XB-WVXMC-BTDCT-MKKG7&#13;
Windows 8.1 Enterprise N | TT4HM-HN7YT-62K67-RGRQJ-JFFXW&#13;
&#13;
&#13;
## Windows 8&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows 8 Pro | NG4HW-VH26C-733KW-K6F98-J8CK4&#13;
Windows 8 Pro N | XCVCF-2NXM9-723PB-MHCB7-2RYQQ&#13;
Windows 8 Enterprise | 32JNW-9KQ84-P47T8-D8GGY-CWCK7&#13;
Windows 8 Enterprise N | JMNMF-RHW7P-DMY6X-RF3DR-X2BQT&#13;
&#13;
&#13;
## Windows 7&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows 7 Professional | FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4&#13;
Windows 7 Professional N | MRPKT-YTG23-K7D7T-X2JMM-QY7MG&#13;
Windows 7 Professional E | W82YF-2Q76Y-63HXB-FGJG9-GF7QX&#13;
Windows 7 Enterprise | 33PXH-7Y6KF-2VJC9-XBBR8-HVTHH&#13;
Windows 7 Enterprise N | YDRBP-3D83W-TY26F-D46B2-XCKRJ&#13;
Windows 7 Enterprise E | C29WB-22CC8-VJ326-GHFJW-H9DH4&#13;
&#13;
&#13;
&#13;
## Windows Vista&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows Vista Business | YFKBB-PQJJV-G996G-VWGXY-2V3X8&#13;
Windows Vista Business N | HMBQG-8H2RH-C77VX-27R82-VMQBT&#13;
Windows Vista Enterprise | VKK3X-68KWM-X2YGT-QR4M6-4BWMV&#13;
Windows Vista Enterprise N | VTC42-BM838-43QHV-84HX6-XJXKV&#13;
&#13;
&#13;
## Windows IoT Enterprise&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows IoT Enterprise LTSC 2021 | KBN8V-HFGQ4-MGXVD-347P6-PDQGT&#13;
&#13;
&#13;
&#13;
&#13;
# Windows Server LTSC&#13;
&#13;
## Windows Server 2025&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows Server 2025 Standard | MFY9F-XBN2F-TYFMP-CCV49-RMYVH&#13;
Windows Server 2025 Datacenter | 2KNJJ-33Y9H-2GXGX-KMQWH-G6H67&#13;
Windows Server 2025 Datacenter: Azure Edition | ?&#13;
&#13;
## Windows Server 2022&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows Server 2022 Standard | VDYBN-27WPP-V4HQT-9VMD4-VMK7H&#13;
Windows Server 2022 Datacenter | WX4NM-KYWYW-QJJR4-XV3QB-6VM33&#13;
Windows Server 2022 Datacenter: Azure Edition | NTBV8-9K7Q8-V27C6-M2BTV-KHMXV&#13;
&#13;
## Windows Server 2019&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows Server 2019 Standard | N69G4-B89J2-4G8F4-WWYCC-J464C&#13;
Windows Server 2019 Datacenter | WMDGN-G9PQG-XVVXX-R3X43-63DFG&#13;
Windows Server 2019 Essentials | WVDHN-86M7X-466P6-VHXV7-YY726&#13;
&#13;
## Windows Server 2016&#13;
オペレーティング システムのエディション | KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows Server 2016 Standard | WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY&#13;
Windows Server 2016 Datacenter | CB7KF-BWN84-R7R2Y-793K2-8XDDG&#13;
Windows Server 2016 Essentials | JCKRF-N37P4-C2D82-9YXRT-4M63B&#13;
&#13;
&#13;
## Windows Server バージョン 20H2、2004、1909、1903、1809&#13;
&gt; Windows Server バージョン 20H2以前 は、2022 年 8 月 9 日にサービス終了&#13;
&#13;
オペレーティング システムのエディション	| KMS クライアント プロダクト キー&#13;
-- | --&#13;
Windows Server Standard	| N2KJX-J94YW-TQVFB-DG9YT-724CC&#13;
Windows Server Datacenter	| 6NMRW-2C8FM-D24W7-TQWMY-CWH2D&#13;
&#13;
&#13;
# KMS激活&#13;
## Windows 11 PRO KMS激活&#13;
```&#13;
slmgr -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX&#13;
slmgr -skms kms.0t.net.cn&#13;
slmgr -ato&#13;
```&#13;
&#13;
## Windows 11 （24H2）LTSC KMS激活&#13;
```&#13;
slmgr -ipk M7XTQ-FN8P6-TTKYV-9D4CC-J462D&#13;
slmgr -skms kms.0t.net.cn&#13;
slmgr -ato&#13;
```&#13;
&#13;
&#13;
## Windows Server 2025 KMS激活&#13;
```&#13;
slmgr -ipk MFY9F-XBN2F-TYFMP-CCV49-RMYVH&#13;
slmgr -skms kms.0t.net.cn&#13;
slmgr -ato&#13;
```&#13;
&#13;
- 服务器标准：MFY9F-XBN2F-TYFMP-CCV49-RMYVH&#13;
- 数据中心：2KNJJ-33Y9H-2GXGX-KMQWH-G6H67&#13;
&#13;
&#13;
&#13;
# Office、Project 和 Visio 激活的 GVLK&#13;
&#13;
## GVLK for Office LTSC 2024&#13;
产品 | GVLK&#13;
-- | --&#13;
Office LTSC 专业增强版 2024 | XJ2XN-FW8RK-P4HMP-DKDBV-GCVGB&#13;
Office LTSC 标准版 2024 | V28N4-JG22K-W66P8-VTMGK-H6HGR&#13;
Project Professional 2024 | FQQ23-N4YCY-73HQ3-FM9WC-76HF4&#13;
Project Standard 2024 | PD3TT-NTHQQ-VC7CY-MFXK3-G87F8&#13;
Visio LTSC Professional 2024 | B7TN8-FJ8V3-7QYCP-HQPMV-YY89G&#13;
Visio LTSC Standard 2024 | JMMVY-XFNQC-KK4HK-9H7R3-WQQTV&#13;
Access LTSC 2024 | 82FTR-NCHR7-W3944-MGRHM-JMCWD&#13;
Excel LTSC 2024 | F4DYN-89BP2-WQTWJ-GR8YC-CKGJG&#13;
Outlook LTSC 2024 | D2F8D-N3Q3B-J28PV-X27HD-RJWB9&#13;
PowerPoint LTSC 2024 | CW94N-K6GJH-9CTXY-MG2VC-FYCWP&#13;
Skype for Business LTSC 2024 | 4NKHF-9HBQF-Q3B6C-7YV34-F64P3&#13;
Word LTSC 2024 | MQ84N-7VYDM-FXV7C-6K7CC-VFW9J&#13;
&#13;
&#13;
## GVLK for Office LTSC 2021&#13;
产品 | GVLK&#13;
-- | --&#13;
Office LTSC Professional Plus 2021|FXYTK-NJJ8C-GB6DW-3DYQT-6F7TH&#13;
Office LTSC Standard 2021|KDX7X-BNVR8-TXXGX-4Q7Y8-78VT3&#13;
Project Professional 2021|FTNWT-C6WBT-8HMGF-K9PRX-QV9H8&#13;
Project Standard 2021|J2JDC-NJCYY-9RGQ4-YXWMH-T3D4T&#13;
Visio LTSC Professional 2021|KNH8D-FGHT4-T8RK3-CTDYJ-K2HT4&#13;
Visio LTSC Standard 2021|MJVNY-BYWPY-CWV6J-2RKRT-4M8QG&#13;
Access LTSC 2021|WM8YG-YNGDD-4JHDC-PG3F4-FC4T4&#13;
Excel LTSC 2021|NWG3X-87C9K-TC7YY-BC2G7-G6RVC&#13;
Outlook LTSC 2021|C9FM6-3N72F-HFJXB-TM3V9-T86R9&#13;
PowerPoint LTSC 2021|TY7XF-NFRBR-KJ44C-G83KF-GX27K&#13;
Publisher LTSC 2021|2MW9D-N4BXM-9VBPG-Q7W6M-KFBGQ&#13;
Skype for Business LTSC 2021|HWCXN-K3WBT-WJBKY-R8BD9-XK29P&#13;
Word LTSC 2021|TN8H9-M34D3-Y64V9-TR72V-X79KV&#13;
&#13;
&#13;
## Office 2019 的 GVLK&#13;
产品 | GVLK&#13;
-- | --&#13;
Office 专业增强版 2019|NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP&#13;
2019 Office Standard|6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK&#13;
Project Professional 2019|B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B&#13;
2019 Project Standard|C4F7P-NCP8C-6CQPT-MQHV9-JXD2M&#13;
2019 Visio Professional|9BGNQ-K37YR-RQHF2-38RQ3-7VCBB&#13;
2019 Visio Standard|7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2&#13;
Access 2019|9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT&#13;
Excel 2019|TMJWT-YYNMB-3BKTF-644FC-RVXBD&#13;
Outlook 2019|7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK&#13;
PowerPoint 2019|RRNCX-C64HY-W2MM7-MCH9G-TJHMQ&#13;
Publisher 2019|G2KWX-3NW6P-PY93R-JXK2T-C9Y9V&#13;
Skype for Business 2019|NCJ33-JHBBY-HTK98-MYCV8-HMKHJ&#13;
Word 2019|PBX3G-NWMT6-Q7XBW-PYJGG-WXD33&#13;
 &#13;
&#13;
## Office 2016 的 GVLK&#13;
产品 | GVLK&#13;
-- | --&#13;
Office Professional Plus 2016|XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99&#13;
Office Standard 2016|JNRGM-WHDWX-FJJG3-K47QV-DRTFM&#13;
Project Professional 2016|YG9NW-3K39V-2T3HJ-93F3Q-G83KT&#13;
Project Standard 2016|GNFHQ-F6YQM-KQDGJ-327XX-KQBVC&#13;
Visio Professional 2016|PD3PC-RHNGV-FXJ29-8JK7D-RJRJK&#13;
Visio Standard 2016|7WHWN-4T7MP-G96JF-G33KR-W8GF4&#13;
Access 2016|GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW&#13;
Excel 2016|9C2PK-NWTVB-JMPW8-BFT28-7FTBF&#13;
OneNote 2016|DR92N-9HTF2-97XKM-XW2WJ-XW3J6&#13;
Outlook 2016|R69KK-NTPKF-7M3Q4-QYBHW-6MT9B&#13;
PowerPoint 2016|J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6&#13;
Publisher 2016|F47MM-N3XJP-TQXJ9-BP99D-8837K&#13;
Skype for Business 2016|869NQ-FJ69K-466HW-QYCP2-DDBV6&#13;
Word 2016|WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/13.html</guid><pubDate>Sun, 29 Sep 2024 08:00:10 +0000</pubDate></item><item><title>Vol.12 WinPE工具</title><link>https://blog.grapehut.us.kg/post/12.html</link><description># 微 PE 工具箱&#13;
&#13;
## 以下是使用微 PE 安装 Windows 11 的详细教程：&#13;
&#13;
#### 1. 准备工作：&#13;
   - 一个容量不小于 8GB 的 U 盘（建议使用 USB 3.0 及以上版本，速度更快）。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/12.html</guid><pubDate>Sun, 29 Sep 2024 04:13:00 +0000</pubDate></item><item><title>Vol.11 WSL（Windows Subsystem for Linux）</title><link>https://blog.grapehut.us.kg/post/11.html</link><description># 关于 WSL（Windows Subsystem for Linux）&#13;
Windows 的一项功能，可用于在 Windows 计算机上运行 Linux 环境，而无需单独的虚拟机或双引导。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/11.html</guid><pubDate>Tue, 24 Sep 2024 14:36:27 +0000</pubDate></item><item><title>Vol.10 《备忘录》一些Windows命令</title><link>https://blog.grapehut.us.kg/post/10.html</link><description># 查看内网IP&#13;
```&#13;
ipconfig&#13;
```&#13;
&#13;
# 查看公网IP&#13;
```&#13;
curl ipinfo.io&#13;
```&#13;
&#13;
# 网络诊断&#13;
```&#13;
tracert www.google.com&#13;
```&#13;
&#13;
# WIFI密码&#13;
```&#13;
netsh wlan show profiles                         　←查看名字&#13;
netsh wlan show profiles name=xxxx key=clear        ←名字代入&#13;
```&#13;
&#13;
# 强制启动ie老版浏览器&#13;
```&#13;
CreateObject('InternetExplorer.Application').Visible=true&#13;
保存为vbs&#13;
```&#13;
&#13;
# 修复系统文件&#13;
```&#13;
sfc /scannow&#13;
```&#13;
&#13;
# 恢复应用商店&#13;
```&#13;
wsreset -i&#13;
```&#13;
&#13;
&#13;
# 删除Windows内置app [win11debloat](https://github.com/raphire/win11debloat/)&#13;
```&#13;
irm 'https://win11debloat.raphi.re/' | iex&#13;
```&#13;
&#13;
# 修改Win设置 [ChrisTitusTech/winutil](https://github.com/ChrisTitusTech/winutil/)&#13;
```&#13;
irm 'https://christitus.com/win' | iex&#13;
```&#13;
&#13;
# 切换成Win10的右键菜单&#13;
```&#13;
reg add 'HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32' /f /ve&#13;
````&#13;
&#13;
# 切换成Win11的右键菜单（不推荐）&#13;
```&#13;
reg delete 'HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}' /f &#13;
```&#13;
&#13;
# 永久暂停Windows自动更新&#13;
```&#13;
reg add 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings' /v FlightSettingsMaxPauseDays /t reg_dword /d 9999 /f&#13;
```&#13;
&#13;
&#13;
# Windows家庭版，强制开启hyper-v&#13;
`Gmeek-html&lt;img src='https://gitee.com/tech-shrimp/me/raw/master/doc/images/240119/3.png'&gt;`&#13;
&#13;
```&#13;
pushd '%~dp0'&#13;
dir /b %SystemRoot%servicingPackages*Hyper-V*.mum &gt;hv.txt&#13;
for /f %%i in ('findstr /i . hv.txt 2^&gt;nul') do dism /online /norestart /add-package:'%SystemRoot%servicingPackages%%i'&#13;
del hv.txt&#13;
Dism /online /enable-feature /featurename:Microsoft-Hyper-V -All /LimitAccess /ALL&#13;
pause&#13;
&#13;
将文本文档改名为'xxx.bat'，需注意.bat是扩展名&#13;
运行完成后，重启电脑&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
# Powershell 控制鼠标移动&#13;
&#13;
```&#13;
# .NET Frameworkの宣言&#13;
[void] [System.Reflection.Assembly]::LoadWithPartialName('System.Drawing') &#13;
[void] [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') &#13;
&#13;
# Windows APIの宣言&#13;
$signature=@'&#13;
[DllImport('user32.dll',CharSet=CharSet.Auto,CallingConvention=CallingConvention.StdCall)]&#13;
public static extern void mouse_event(long dwFlags, long dx, long dy, long cButtons, long dwExtraInfo);&#13;
'@&#13;
$SendMouseClick = Add-Type -memberDefinition $signature -name 'Win32MouseEventNew' -namespace Win32Functions -passThru&#13;
&#13;
while ($true) {&#13;
&#13;
    # マウスカーソル移動&#13;
    [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(627, 379)&#13;
    # 左クリック&#13;
    $SendMouseClick::mouse_event(0x0002, 0, 0, 0, 0);&#13;
    $SendMouseClick::mouse_event(0x0004, 0, 0, 0, 0);&#13;
    Start-Sleep -s 3&#13;
&#13;
    # マウスカーソル移動&#13;
    [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(859, 194)&#13;
    # 左クリック&#13;
    $SendMouseClick::mouse_event(0x0002, 0, 0, 0, 0);&#13;
    $SendMouseClick::mouse_event(0x0004, 0, 0, 0, 0);&#13;
    Start-Sleep -s 3&#13;
}&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
# Windows特殊文件夹&#13;
- System.Environmentを使って特殊フォルダ一覧リストを出力&#13;
```&#13;
[Environment+SpecialFolder]::GetNames([Environment+SpecialFolder]) | Sort-Object&#13;
&#13;
↓↓特殊フォルダの一覧&#13;
AdminTools&#13;
ApplicationData&#13;
CDBurning&#13;
CommonAdminTools&#13;
CommonApplicationData&#13;
CommonDesktopDirectory&#13;
CommonDocuments&#13;
CommonMusic&#13;
CommonOemLinks&#13;
CommonPictures&#13;
CommonProgramFiles&#13;
CommonProgramFilesX86&#13;
CommonPrograms&#13;
CommonStartMenu&#13;
CommonStartup&#13;
CommonTemplates&#13;
CommonVideos&#13;
Cookies&#13;
Desktop&#13;
DesktopDirectory&#13;
Favorites&#13;
Fonts&#13;
History&#13;
InternetCache&#13;
LocalApplicationData&#13;
LocalizedResources&#13;
MyComputer&#13;
MyDocuments&#13;
MyMusic&#13;
MyPictures&#13;
MyVideos&#13;
NetworkShortcuts&#13;
Personal&#13;
PrinterShortcuts&#13;
ProgramFiles&#13;
ProgramFilesX86&#13;
Programs&#13;
Recent&#13;
Resources&#13;
SendTo&#13;
StartMenu&#13;
Startup&#13;
System&#13;
SystemX86&#13;
Templates&#13;
UserProfile&#13;
Windows&#13;
```&#13;
&#13;
- 各特殊フォルダのパスの取得方法は、Enviroment.GetFolderPath() メソッドを使用&#13;
```&#13;
[Environment]::GetFolderPath('Desktop')&#13;
&gt; C:\Users\xyz\Desktop&#13;
&#13;
[Environment]::GetFolderPath('AdminTools')&#13;
&gt; C:\Users\xyz\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Administrative Tools&#13;
&#13;
[Environment]::GetFolderPath('ProgramFiles')&#13;
&gt; C:\Program Files (x86)&#13;
```&#13;
&#13;
&#13;
- 特殊フォルダのパス一覧を出力&#13;
```&#13;
$SpecialFolders = @{}&#13;
$names = [Environment+SpecialFolder]::GetNames([Environment+SpecialFolder]) | Sort-Object&#13;
$names | Format-Table&#13;
&#13;
foreach($name in $names)&#13;
{&#13;
  if($path = [Environment]::GetFolderPath($name)){&#13;
    $SpecialFolders[$name] = $path&#13;
  }&#13;
}&#13;
$SpecialFolders | Format-Table&#13;
&#13;
# ↓↓パス一覧&#13;
Name                           Value&#13;
----                           -----&#13;
System                         C:\WINDOWS\system32&#13;
CommonApplicationData          C:\ProgramData&#13;
CommonVideos                   C:\Users\Public\Videos&#13;
CDBurning                      C:\Users\win11\AppData\Local\Microsoft\Windows\Burn\Burn&#13;
MyVideos                       C:\Users\win11\Videos&#13;
ProgramFilesX86                C:\Program Files (x86)&#13;
AdminTools                     C:\Users\win11\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Administrative Tools&#13;
History                        C:\Users\win11\AppData\Local\Microsoft\Windows\History&#13;
CommonDocuments                C:\Users\Public\Documents&#13;
Templates                      C:\Users\win11\AppData\Roaming\Microsoft\Windows\Templates&#13;
CommonDesktopDirectory         C:\Users\Public\Desktop&#13;
UserProfile                    C:\Users\win11&#13;
Startup                        C:\Users\win11\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&#13;
InternetCache                  C:\Users\win11\AppData\Local\Microsoft\Windows\INetCache&#13;
SystemX86                      C:\WINDOWS\SysWOW64&#13;
CommonStartMenu                C:\ProgramData\Microsoft\Windows\Start Menu&#13;
MyPictures                     C:\Users\win11\Pictures&#13;
Recent                         C:\Users\win11\AppData\Roaming\Microsoft\Windows\Recent&#13;
Fonts                          C:\WINDOWS\Fonts&#13;
SendTo                         C:\Users\win11\AppData\Roaming\Microsoft\Windows\SendTo&#13;
CommonProgramFiles             C:\Program Files\Common Files&#13;
ProgramFiles                   C:\Program Files&#13;
Favorites                      C:\Users\win11\Favorites&#13;
CommonStartup                  C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup&#13;
Windows                        C:\WINDOWS&#13;
DesktopDirectory               C:\Users\win11\Desktop&#13;
LocalizedResources             C:\WINDOWS&#13;
MyMusic                        C:\Users\win11\Music&#13;
ApplicationData                C:\Users\win11\AppData\Roaming&#13;
CommonPictures                 C:\Users\Public\Pictures&#13;
CommonPrograms                 C:\ProgramData\Microsoft\Windows\Start Menu\Programs&#13;
Desktop                        C:\Users\win11\Desktop&#13;
PrinterShortcuts               C:\Users\win11\AppData\Roaming\Microsoft\Windows\Printer Shortcuts&#13;
CommonAdminTools               C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Administrative Tools&#13;
NetworkShortcuts               C:\Users\win11\AppData\Roaming\Microsoft\Windows\Network Shortcuts&#13;
CommonMusic                    C:\Users\Public\Music&#13;
CommonProgramFilesX86          C:\Program Files (x86)\Common Files&#13;
Programs                       C:\Users\win11\AppData\Roaming\Microsoft\Windows\Start Menu\Programs&#13;
Resources                      C:\WINDOWS\resources&#13;
MyComputer                     C:\WINDOWS&#13;
CommonTemplates                C:\ProgramData\Microsoft\Windows\Templates&#13;
CommonOemLinks                 C:\WINDOWS&#13;
MyDocuments                    C:\Users\win11\Documents&#13;
StartMenu                      C:\Users\win11\AppData\Roaming\Microsoft\Windows\Start Menu&#13;
Cookies                        C:\Users\win11\AppData\Local\Microsoft\Windows\INetCookies&#13;
LocalApplicationData           C:\Users\win11\AppData\Local&#13;
Personal                       C:\Users\win11\Documents&#13;
```&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/10.html</guid><pubDate>Mon, 23 Sep 2024 13:28:51 +0000</pubDate></item><item><title>Vol.9 字体</title><link>https://blog.grapehut.us.kg/post/9.html</link><description># 👀字体类型与格式&#13;
常见的字体类型与格式有 “ ttf、otf、ttc、vf、woff/woff2、可变字体、EOT、BDF、SVG ” 8种&#13;
&#13;
#### 1. TTF（TrueType）&#13;
由Apple和Microsoft在20世纪80年代后期开发的轮廓字体标准，.ttf结尾的字体具有TrueType轮廓，Windows和MacOS都支持TTF格式的字体，它已成为最常用的字体格式。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/9.html</guid><pubDate>Mon, 23 Sep 2024 12:20:16 +0000</pubDate></item><item><title>Vol.8 VM虚拟机</title><link>https://blog.grapehut.us.kg/post/8.html</link><description># 常用VM虚拟机软件一览&#13;
&#13;
虚拟机的使用场景很多，如搭建测试环境、在Windows系统中安装Linux、在Mac机器上运行Windows系统&#13;
虚拟机的关键优势在于实现了跟原生系统的完全隔离，这使得我们可以在虚拟机上做各类测试。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/8.html</guid><pubDate>Mon, 23 Sep 2024 02:36:28 +0000</pubDate></item><item><title>Vol.7 PowerShell命令</title><link>https://blog.grapehut.us.kg/post/7.html</link><description>`Gmeek-html&lt;img src='https://erainnovator.com/wp-content/uploads/2021/04/PowerShell.png'&gt;`&#13;
&#13;
# Powershell的基本概念&#13;
&#13;
## ps1文件&#13;
一个PowerShell脚本其实就是一个简单的文本文件， 这个文件包含了一系列PowerShell命令，每个命令显示为独立的一行，文件名需要加上.ps1的扩展名。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/7.html</guid><pubDate>Sat, 21 Sep 2024 15:13:50 +0000</pubDate></item><item><title>Vol.6 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform</title><link>https://blog.grapehut.us.kg/post/6.html</link><description># 内容简介&#13;
把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform&#13;
&#13;
&#13;
# 添加内容&#13;
如果你是小白，或者只需要最基础的功能，那么只用将这下面代码加入 html 页面的 head 或 body 中，即可加载看板娘：&#13;
```&#13;
&lt;script src='https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js'&gt;&lt;/script&gt;&#13;
&lt;script src='https://cdn.jsdelivr.net/npm/jquery-ui@1.14.1/dist/jquery-ui.min.js'&gt;&lt;/script&gt;&#13;
&lt;script src='https://cdn.jsdelivr.net/gh/hst1189/live2d-widget/autoload.js'&gt;&lt;/script&gt;&#13;
```&#13;
autoload.js 会自动加载：`live2d.min.js` `waifu.min.css` `waifu-tips.min.js` `ModelDefine.js` &#13;
详细参考：https://github.com/hst1189/live2d-widget&#13;
&#13;
# 添加效果&#13;
https://grapehut.us.kg/&#13;
`Gmeek-html&lt;img src='https://www.live2d.com/wp-content/themes/cubism_new/assets/img/index/index-nizimalive-mainimg.png'&gt;`&#13;
&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/6.html</guid><pubDate>Sun, 15 Sep 2024 06:16:06 +0000</pubDate></item><item><title>Vol.5 git原理及常用命令</title><link>https://blog.grapehut.us.kg/post/5.html</link><description>&#13;
# git 公式サイト&#13;
[https://git-scm.com](https://git-scm.com/)&#13;
&#13;
[http://git-cheatsheet.com](http://git-cheatsheet.com/)&#13;
&#13;
[PDF](https://wac-cdn.atlassian.com/dam/jcr:e7e22f25-bba2-4ef1-a197-53f46b6df4a5/SWTM-2088_Atlassian-Git-Cheatsheet.pdf)&#13;
&#13;
# git-cheat-sheet&#13;
![git](./git-cheat-sheet.png)&#13;
&#13;
&#13;
# git 工作原理&#13;
![git](./git-status.png)&#13;
```&#13;
・Remote：远程仓库，托管代码的服务器&#13;
・Repository：仓库区（或版本库），其中HEAD指向最新放入仓库的版本&#13;
・Index／Stage：暂存区（或索引区），用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息&#13;
・Workspace：工作区，就是你平时存放项目代码的地方&#13;
```&#13;
#### １．具体例：下图中的四条命令在「工作区」、「暂存区」、「仓库区」之间复制文件。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/5.html</guid><pubDate>Wed, 04 Sep 2024 14:30:35 +0000</pubDate></item><item><title>Vol.4 网站发布（任意域名）</title><link>https://blog.grapehut.us.kg/post/4.html</link><description>```&#13;
域名　→　cloudflare　→　github&#13;
```&#13;
&#13;
# 一、注册域名（任意域名）&#13;
付费的，免费的都可以，根据自身钱包的富裕程度，👀  省略若干字。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/4.html</guid><pubDate>Sun, 01 Sep 2024 06:04:46 +0000</pubDate></item><item><title>Vol.3 Gmeek构建网站（进阶篇）</title><link>https://blog.grapehut.us.kg/post/3.html</link><description># 一、主题配置 👀 &#13;
&#13;
### 1. 手动模式（默认）&#13;
这种模式就是当访问者第一次打开博客页面时，呈现的是亮主题。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/3.html</guid><pubDate>Sun, 01 Sep 2024 06:01:28 +0000</pubDate></item><item><title>Vol.1 Gmeek构建网站（基础篇）</title><link>https://blog.grapehut.us.kg/post/1.html</link><description># 前言&#13;
[Gmeek](https://github.com/Meekdai/Gmeek) 一个博客框架&#13;
超轻量级个人博客模板，完全基于`Github Pages `、 `Github Issues` 和 `Github Actions`，可以称作`All in Github`&#13;
&gt; 引用：https://blog.meekdai.com/post/Gmeek-kuai-su-shang-shou.html&#13;
&#13;
&#13;
# 📑 一、安装&#13;
&gt; [!TIP]&#13;
&gt; 安装极其简单，根据以下步骤，一步一步操作。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/post/1.html</guid><pubDate>Sat, 31 Aug 2024 09:59:06 +0000</pubDate></item><item><title>About</title><link>https://blog.grapehut.us.kg/about.html</link><guid isPermaLink="true">https://blog.grapehut.us.kg/about.html</guid><pubDate>Sat, 31 Aug 2024 14:18:20 +0000</pubDate></item><item><title>Link</title><link>https://blog.grapehut.us.kg/link.html</link><description>- https://app.follow.is/ - 万物皆可订阅，RSSHub创始者的又一个有趣项目&#13;
- https://start.me/ - 网页收藏夹&#13;
- https://app.raindrop.io/ - 网页收藏夹&#13;
- https://misskey.io/ - 分散型SNS&#13;
。</description><guid isPermaLink="true">https://blog.grapehut.us.kg/link.html</guid><pubDate>Wed, 09 Oct 2024 04:44:59 +0000</pubDate></item></channel></rss>